"use strict"

class Snap{
    generateToken(privateKey, xClientKey) {
        try {
            const xTimestamp = this.generateTimestamp(); // Generate xTimestamp
            const signatureElements = `${xClientKey}|${xTimestamp}`;
            const kjurSignature = new KJUR.crypto.Signature({"alg": "SHA256withRSA"});
            kjurSignature.init(privateKey);
            kjurSignature.updateString(signatureElements);
            const signatureResult = hex2b64(kjurSignature.sign());
            return { signatureResult, xTimestamp }; // Return both signatureResult and xTimestamp
        } catch(error) {
            console.error("generateToken", error);
            throw error;
        }
    }

    generateTimestamp() {
        const now = new Date();
        const offset = now.getTimezoneOffset(); // Get timezone offset in minutes
        const offsetHours = Math.abs(offset / 60); // Convert offset to hours
        const offsetMinutes = Math.abs(offset % 60); // Get remaining minutes
        
        const sign = offset >= 0 ? '-' : '+'; // Determine sign of offset
        const pad = (num) => String(num).padStart(2, '0'); // Padding function
        
        return `${now.getFullYear()}-${pad(now.getMonth() + 1)}-${pad(now.getDate())}T${pad(now.getHours())}:${pad(now.getMinutes())}:${pad(now.getSeconds())}${sign}${pad(offsetHours)}:${pad(offsetMinutes)}`;
    }

    generateSignatureSnapGetToken(privateKey, xClientKey, xTimestamp) {
        try {
            const signatureElements = `${xClientKey}|${xTimestamp}`;
            const kjurSignature = new KJUR.crypto.Signature({"alg": "SHA256withRSA"});
            kjurSignature.init(privateKey);
            kjurSignature.updateString(signatureElements);
            const signatureResult = hex2b64(kjurSignature.sign());
            return signatureResult;
        } catch(error) {
            console.error("generateSignatureSnapGetToken", error);
            throw error;
        }
    }
  }
module.exports = Snap;